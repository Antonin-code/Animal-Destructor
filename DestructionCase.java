import java.util.Objects;
import java.util.Scanner;

public class DestructionCase {
    /*Fonction pour demander des coordonnÃ©es Ã  l'utilisateur et dÃ©truire la case correspondante
    Cette fonction rÃ©cupÃ¨re une grille et demande au joueur des coordonnÃ©es en un nombre et une lettre
    SI la coordonnÃ©e est bien Ã©crite et SI la case choisie est valide, elle se transformera en feu
    Les cases valides sont les cases herbe uniquement
     */
    /**
     * Demande Ã  l'utilisateur des coordonnÃ©es pour dÃ©truire une case de la grille.
     * Si les coordonnÃ©es sont valides (dans les limites de la grille et correspondant Ã  une case "ğŸŸ©"),
     * la case sera remplacÃ©e par "ğŸ”¥".
     *
     * @param grille Une matrice de chaÃ®nes de caractÃ¨res reprÃ©sentant la grille de jeu.
     *               Chaque Ã©lÃ©ment de la matrice correspond Ã  une case, avec des Ã©tats possibles comme "ğŸŸ©" (herbe) ou "ğŸ”¥" (feu).
     *
     * <h3>Format des coordonnÃ©es :</h3>
     * <ul>
     *     <li>Les coordonnÃ©es doivent Ãªtre entrÃ©es sous la forme d'un chiffre suivi d'une lettre (par exemple, "1A").</li>
     *     <li>Le chiffre reprÃ©sente la colonne (1-11).</li>
     *     <li>La lettre reprÃ©sente la ligne (A-J).</li>
     * </ul>
     *
     * <h3>Exemple d'utilisation :</h3>
     * <pre>
     * {@code
     * String[][] grille = Generation.CreationTerrain();
     * DestructionCase.Destruction(grille);
     * }
     * </pre>
     *
     * <h3>Comportement :</h3>
     * <ul>
     *     <li>Affiche un message si les coordonnÃ©es sont invalides.</li>
     *     <li>Continue de demander des coordonnÃ©es jusqu'Ã  ce qu'une case valide soit sÃ©lectionnÃ©e.</li>
     *     <li>Met Ã  jour la grille en remplaÃ§ant "ğŸŸ©" par "ğŸ”¥".</li>
     * </ul>
     */
    public static void Destruction(String[][] grille) {
        //Affichage du terrain
        Generation.Affichage(grille);

        //Variables pour texte en couleurs
        final String ROUGE = "\u001B[31m";
        final String BLEU = "\u001B[36m";
        final String RESET = "\u001B[0m";

        short ColonneCoord = 0;
        short LigneCoord = 0;

        boolean estvalide = false;
        //Boucle pour vÃ©rifier si les coordonnÃ©es donnÃ©es sont valides
        while(!estvalide) {

            //RÃ©cupÃ©rer les coordonnÃ©es
            System.out.println("Veuillez rentrer les coordonnÃ©es (exemple: "+ BLEU +"1"+ROUGE+"A"+RESET+" ) :");
            Scanner sc = new Scanner(System.in);
            String Coordonnees = sc.nextLine();

            if (Objects.equals(Coordonnees, "R") || Objects.equals(Coordonnees, "r")) {
                Choix.regles_Jeu(grille);
            }
            if (Objects.equals(Coordonnees, "L") || Objects.equals(Coordonnees, "l")) {
                Menu.Quitter();
            }
            if (Objects.equals(Coordonnees, "") || Objects.equals(Coordonnees, null)) {
                Coordonnees = "00";
            }


            //SÃ©parer le numÃ©ro de la colonne et la lettre de la ligne
            String Colonne = Coordonnees.substring(0, Coordonnees.length()-1);
            String Ligne = Coordonnees.substring(Coordonnees.length()-1);


            //Transformer les index en shorts
            try {
                ColonneCoord = Short.parseShort(Colonne);
                //RÃ©cupÃ©rer l'instance de la lettre ligne en ASCII et soustraire 64 pour obtenir l'index correspondant
                LigneCoord = (short)(Ligne.toUpperCase().charAt(0) - 64);
            }
            catch(Exception e) {
            }

            if (!Objects.equals(Coordonnees, "R") && !Objects.equals(Coordonnees, "r")){
                //VÃ©rifier si les coordonnÃ©es sont dans le terrain
                if ((ColonneCoord > 11 || ColonneCoord < 1 || LigneCoord > 10 || LigneCoord < 1) || !Objects.equals(grille[LigneCoord][ColonneCoord] , "ğŸŸ©")) {
                    System.out.println("CoordonnÃ©es Invalides");
                }
            else {
                estvalide = true;
            }
        }
        }
        grille[LigneCoord][ColonneCoord] = "ğŸ”¥";
    }
}
